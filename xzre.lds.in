#define QUOTED(a) #a
#define QUOTE(a) QUOTED(a)

#ifdef GEN_CSV
#define DEFSYM(name, section) QUOTE(name),QUOTE(section)
#define SECTIONS_BEGIN()
#define SECTIONS_END(name)
// CSV header
name,section
#else
#define DEFSYM2(name, offset) QUOTE(name) = . + offset;
#define DEFSYM_START(section) section : {
#define DEFSYM_END(section) *(section); }
#define DEFSYM(name, section) \
	DEFSYM_START(section) \
		DEFSYM2(name, 0) \
	DEFSYM_END(section)
#define SECTIONS_BEGIN() SECTIONS {
#define SECTIONS_END(name) } INSERT AFTER name;
#endif

SECTIONS_BEGIN()
	DEFSYM(x86_dasm, .text.x86_codd)
	DEFSYM(find_call_instruction, .text.lzma_optimum_normaa)
	DEFSYM(find_lea_instruction, .text.lzma_raw_encodea)
	DEFSYM(find_instruction_with_mem_operand, .text.stream_encoder_mt_inia)
	DEFSYM(find_lea_instruction_with_mem_operand, .text.lzma_mt_block_siza)
	DEFSYM(find_add_instruction_with_mem_operand, .text.lzma_simple_x86_decoder_inif)
	DEFSYM_START(.text.lzma_filters_updata)
		DEFSYM2(find_mov_lea_instruction, 0)
		DEFSYM2(find_mov_instruction, 0xDF0 - 0xD30)
	DEFSYM_END(.text.lzma_filters_updata)
	DEFSYM(find_instruction_with_mem_operand_ex, .text.lzma_properties_siza)
	DEFSYM(find_function_prologue, .text.lzma_raw_coder_memusaga)
	DEFSYM(find_function, .text.lzma2_encoder_inia)
	DEFSYM(get_lzma_allocator, .text.stream_decoder_memconfia)
	DEFSYM(get_lzma_allocator_address, .text.stream_decoder_mt_ena)
	DEFSYM(fake_lzma_alloc, .text.init_pric_tabla)
	DEFSYM(fake_lzma_free, .text.stream_decoda)
	DEFSYM(secret_data_append_from_call_site, .text.lzma_index_iter_rewina)
	DEFSYM(elf_contains_vaddr, .text.parse_bcz)
	DEFSYM(elf_contains_vaddr_relro, .text.auto_decoda)
	DEFSYM(elf_parse, .text.get_literal_prica)
	DEFSYM(main_elf_parse, .text.lzma_filter_decoder_is_supportea)
	DEFSYM(check_argument, .text.lzma_encoder_inia)
	DEFSYM(elf_symbol_get, .text.crc_inia)
	DEFSYM(elf_find_function_pointer, .text.reverse_seez)
	DEFSYM_START(.text.crc64_generia)
		DEFSYM2(elf_symbol_get_addr, 0)
		DEFSYM2(c_memmove, 0x1B20 - 0x1AF0)
	DEFSYM_END(.text.crc64_generia)
	DEFSYM(elf_get_code_segment, .text.lzma_check_updata)
	DEFSYM(elf_get_rodata_segment, .text.index_tree_appena)
	DEFSYM(elf_get_data_segment, .text.microlzma_decoda)
	DEFSYM(elf_get_plt_symbol, .text.delta_coder_ena)
	DEFSYM(elf_get_got_symbol, .text.delta_decoda)
	DEFSYM(elf_get_reloc_symbol, .text.lz_encoda)
	DEFSYM(elf_find_string, .text.lzip_decoda)
	DEFSYM(elf_find_string_reference, .text.lzma_auto_decoda)
	DEFSYM(secret_data_append_from_instruction, .text.lzma_lzma_encoder_inia)
	DEFSYM(secret_data_append_from_code, .text.lzma_memlimit_gea)
	DEFSYM(secret_data_append_item, .text.lzma_check_inia)
	DEFSYM(secret_data_append_items, .text.lzma_index_memusagz)
	DEFSYM(find_reg2reg_instruction, .text.lzma_block_total_siza)
	DEFSYM(find_string_reference, .text.stream_encoda)
	DEFSYM(secret_data_append_singleton, .text.rc_read_inis)
	DEFSYM(secret_data_append_from_address, .text.lzma2_decoder_ena)
	DEFSYM_START(.text._get_cpuia)
		DEFSYM2(backdoor_entry, 0)
		DEFSYM2(backdoor_init, 0xA784 - 0xA710)
	DEFSYM_END(.text._get_cpuia)
	DEFSYM(backdoor_init_stage2, .text.lzma_validate_chaia)
	DEFSYM(init_elf_entry_ctx, .text.read_output_and_waia)
	DEFSYM(get_got_offset, .text.parse_delt1)
	DEFSYM(get_cpuid_got_index, .text.lzma_stream_decoder_inia)
	DEFSYM(backdoor_setup, .text.microlzma_encoder_inia)
	DEFSYM(resolve_libc_imports, .text.lzma_index_buffer_encoda)
	DEFSYM(process_shared_libraries, .text.lzma_index_stream_flaga)
	DEFSYM(process_shared_libraries_map, .text.lzma_index_encoder_inia)
	DEFSYM(chacha_decrypt, .text.lzma_delta_encoder_inia)
	DEFSYM(secret_data_get_decrypted, .text.parse_lzma10)
	DEFSYM(is_range_mapped, .text.hc_find_funa)
	DEFSYM(elf_find_string_references, .text.auto_decoder_iniz)
	DEFSYM(count_bits, .text.lzma_outq_inia)
	DEFSYM(get_string_id, .text.simple_coder_updata)
	DEFSYM(init_hook_functions, .text.lzma_delta_decoder_inis)
	DEFSYM(_get_cpuid_modified, .text._get_cpuid)
	DEFSYM(_cpuid_gcc, .text._cpuid)
	DEFSYM(update_got_address, .text.lzma_stream_header_encoda)
	DEFSYM(get_tls_get_addr_random_symbol_got_offset, .text.lzma_stream_flags_compara)
	DEFSYM(backdoor_symbind64, .text.lz_encoder_prepara)
	DEFSYM(hook_RSA_get0_key, .text.lzma_index_inia)
	DEFSYM(hook_EVP_PKEY_set1_RSA, .text.lzma_index_memusaga)
	DEFSYM(hook_RSA_public_decrypt, .text.lzma_index_prealloa)
	DEFSYM(is_endbr64_instruction, .text.lzma_block_buffer_encoda)
	DEFSYM_START(.text.parse_optiona)
		DEFSYM2(c_strlen, 0)
		DEFSYM2(c_strnlen, 0x7040 - 0x7020)
	DEFSYM_END(.text.parse_optiona)
	DEFSYM(run_backdoor_commands, .text.lzma_index_stream_siza)
	DEFSYM(get_elf_functions_address, .text.lzma_lz_encoder_memusaga)
	DEFSYM(find_dl_audit_offsets, .text.lzma_lz_decoder_inia)
	DEFSYM(find_link_map_l_name, .text.lzma_delta_props_encoda)
	DEFSYM(find_dl_naudit, .text.lzma_filter_flags_decoda)
	DEFSYM(find_link_map_l_audit_any_plt, .text.lzma_index_hash_inia)
	DEFSYM(find_link_map_l_audit_any_plt_bitmask, .text.lzma_index_iter_locata)
	DEFSYM(sshd_get_sensitive_data_address_via_xcalloc, .text.lzma_bufcpa)
	DEFSYM(sshd_get_sensitive_data_address_via_krb5ccname, .text.lzma_lzma_encoder_resea)
	DEFSYM(sshd_get_sensitive_data_score_in_demote_sensitive_data, .text.lzma_delta_coder_inia)
	DEFSYM(sshd_get_sensitive_data_score_in_main, .text.lzma_decoder_inia)
	DEFSYM(sshd_get_sensitive_data_score_in_do_child, .text.lzma_check_finisa)
	DEFSYM(sshd_get_sensitive_data_score, .text.lzma_lzma2_encoder_memusaga)
	DEFSYM(sshd_find_sensitive_data, .text.lzma_lzma_optimum_fasa)
	DEFSYM(bignum_serialize, .text.lzma_block_decoder_inia)
	DEFSYM(rsa_key_hash, .text.lzma_filters_copa)
	DEFSYM_START(.text.lzma_file_info_decodea)
		DEFSYM2(process_is_sshd, 0)
		DEFSYM2(dsa_key_hash, 0x3B70 - 0x3A10)
	DEFSYM_END(.text.lzma_file_info_decodea)
	DEFSYM(sha256, .text.lzma_easy_encodea)
	DEFSYM(verify_signature, .text.lzma_index_dua)
	DEFSYM(sshd_patch_variables, .text.lzma_block_unpadded_siza)
	DEFSYM(sshd_find_monitor_struct, .text.lzma_mf_bt4_fina)
	DEFSYM(sshd_proxy_elevate, .text.lzip_decoder_memconfia)
	DEFSYM(sshd_get_client_socket, .text.index_encoda)
	DEFSYM(sshd_get_usable_socket, .text.index_decoda)
	DEFSYM(sshd_get_sshbuf, .text.threads_stoz)
	DEFSYM(sshd_kex_sshbuf_get, .text.stream_decoder_mt_get_progresz)
	DEFSYM(is_payload_message, .text.worker_stara)
	DEFSYM(decrypt_payload_message, .text.decode_buffez)
	DEFSYM(mm_answer_keyallowed_hook, .text.file_info_decoda)
	DEFSYM(mm_answer_keyverify_hook, .text.bt_skip_funz)
	DEFSYM(mm_log_handler_hook, .text.parse_lzma12z)
	DEFSYM(dummy_tls_get_addr, .text.lzma_simple_props_encoda)
	DEFSYM(fd_read, .text.auto_decoder_inia)
	DEFSYM_START(.text.bt_find_funa)
		DEFSYM2(fd_write, 0)
		DEFSYM2(contains_null_pointers, 0x7160 - 0x70E0)
	DEFSYM_END(.text.bt_find_funa)
	DEFSYM(sshd_log, .text.lzma_block_encoder_updatd)
	DEFSYM(check_backdoor_state, .text.stream_encoder_mt_iniz)
	DEFSYM(sshbuf_bignum_is_negative, .text.length_encoder_resez)
	// FIXME: prototype
	DEFSYM(is_gnu_relro, .text.lzma_simple_props_sizd)
	// FIXME: prototype
	DEFSYM(elf_find_rela_reloc, .text.stream_encoder_updata)
	// FIXME: prototype
	DEFSYM(elf_find_relr_reloc, .text.stream_encoder_updatz)
SECTIONS_END(.text)

SECTIONS_BEGIN()
	DEFSYM(global_ctx, .bss.lzma12_codez)
	DEFSYM(resolver_call_count, .bss.__intr2)
	DEFSYM(hooks_data_addr, .bss.filter_optionz)
SECTIONS_END(.bss)

SECTIONS_BEGIN()
	DEFSYM(fake_lzma_allocator_offset, .data.rel.ro.lookup_filter.part.0)
	DEFSYM(fake_lzma_allocator, .data.rel.ro.decoders0)
	DEFSYM(elf_functions_offset, .data.rel.ro.filter_optmap.0)
	DEFSYM(elf_functions, .data.rel.ro.encoders0)
SECTIONS_END(.data.rel.ro)

SECTIONS_BEGIN()
	DEFSYM(string_mask_data, .rodata.crc64_clmul1)
	DEFSYM(string_action_data, .rodata.lzip_decode0)
	DEFSYM(cpuid_random_symbol, .rodata.lzma_lzma_encode)
	DEFSYM(cpuid_reloc_consts, .rodata.lzma12_mf_mao.0)
	DEFSYM(tls_get_addr_random_symbol, .rodata.lzma2_decode)
	DEFSYM(tls_get_addr_reloc_consts, .rodata.rc_encode)
	// .rodata.get_literal_prica is used as a branch table for switch statements in elf_parse()
	DEFSYM_START(.rodata.MASK_TO_BIT_NUMBER0)
		DEFSYM2(dasm_threebyte_has_modrm, 0x00)
		DEFSYM2(dasm_threebyte_0x38_is_valid, 0x20)
		DEFSYM2(dasm_twobyte_has_modrm, 0x40)
		DEFSYM2(dasm_twobyte_is_valid, 0x60)
	DEFSYM_END(.rodata.MASK_TO_BIT_NUMBER0)
	DEFSYM_START(.rodata.BRANCH_TABLE0)
		DEFSYM2(dasm_onebyte_has_modrm, 0x00)
		DEFSYM2(dasm_onebyte_is_invalid, 0x20)
	DEFSYM_END(.rodata.BRANCH_TABLE0)
SECTIONS_END(.rodata)
